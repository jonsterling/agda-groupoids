{-# OPTIONS --without-K #-}

open import Agda.Primitive
open import Common
import Preorder.Core.Base as P
open import Type as T
  using (_,_)

module Preorder.Reasoning ..{‚Ñì·µí ‚Ñì ∞} (A : P.t ‚Ñì·µí ‚Ñì ∞) where
  infix  4 _‚ä¢‚â§_
  infix  3 _‚àé
  infixr 2 _‚â§‚ü®_‚ü©_
  infix  1 proof_

  data _‚ä¢‚â§_ (a b : P.obj A) : Set ‚Ñì ∞ where
    [_] : (a‚â§b : P.hom·µó A (a , b)) ‚Üí a ‚ä¢‚â§ b

  proof_ : ‚àÄ {a b} ‚Üí a ‚ä¢‚â§ b ‚Üí P.hom·µó A (a , b)
  proof [ a‚â§b ] = a‚â§b

  _‚àé : ‚àÄ a ‚Üí a ‚ä¢‚â§ a
  _‚àé _ = [ P.idn·µó A T.ùüô.* ]

  _‚â§‚ü®_‚ü©_ : ‚àÄ a {b c} ‚Üí P.hom·µó A (a , b) ‚Üí b ‚ä¢‚â§ c ‚Üí a ‚ä¢‚â§ c
  _ ‚â§‚ü® a‚â§b ‚ü© [ b‚â§c ] = [ P.cmp·µó A (b‚â§c , a‚â§b) ]
