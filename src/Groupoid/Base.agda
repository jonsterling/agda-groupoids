{-# OPTIONS --sized-types --without-K #-}

module Groupoid.Base where

open import Agda.Primitive

import Setoid as S
open import Type as T
  using (_,_)

record t ..(РёЊрхњ РёЊ╦брхњ РёЊ╦б╩░ : _) : Set (lsuc (РёЊрхњ Ріћ РёЊ╦брхњ Ріћ РёЊ╦б╩░)) where
  open S.╬а
  field
    obj   : Set РёЊрхњ
    hom╦б  : obj T.Рѕљ.РіЌ obj T.╬а.РЄњРѓђ S.t РёЊ╦брхњ РёЊ╦б╩░
    idn╦брхљ : Рѕђ {a} Рєњ S.­ЮЪЎ.s S.╬а.РЄњРѓђрхЌ hom╦б (a , a)
    cmp╦брхљ : Рѕђ {a b c} Рєњ hom╦б (b , c) S.Рѕљ.РіЌ hom╦б (a , b) S.╬а.РЄњРѓђрхЌ hom╦б (a , c)
    inv╦брхљ : Рѕђ {a b} Рєњ hom╦б (a , b) S.╬а.РЄњРѓђрхЌ hom╦б (b , a)
  field
    .idn-lhs
      : Рѕђ {a b}
      Рєњ (f : S.obj (hom╦б (a , b)))
      Рєњ S.homрхЌ (hom╦б (a , b))
          ( cmp╦брхљ $Рѓђ (idn╦брхљ $Рѓђ T.­ЮЪЎ.* , f)
          , f
          )
    .idn-rhs
      : Рѕђ {a b}
      Рєњ (f : S.obj (hom╦б (a , b)))
      Рєњ S.homрхЌ (hom╦б (a , b))
          ( f
          , cmp╦брхљ $Рѓђ (f , idn╦брхљ $Рѓђ T.­ЮЪЎ.*)
          )
    .cmp-ass
      : Рѕђ {a b c d}
      Рєњ (f : S.obj (hom╦б (a , b)))
      Рєњ (g : S.obj (hom╦б (b , c)))
      Рєњ (h : S.obj (hom╦б (c , d)))
      Рєњ S.homрхЌ (hom╦б (a , d))
          ( cmp╦брхљ $Рѓђ (cmp╦брхљ $Рѓђ (h , g) , f)
          , cmp╦брхљ $Рѓђ (h , cmp╦брхљ $Рѓђ (g , f))
          )
    .inv-lhs
      : Рѕђ {a b}
      Рєњ (f : S.obj (hom╦б (a , b)))
      Рєњ S.homрхЌ (hom╦б (a , a))
          ( cmp╦брхљ $Рѓђ (inv╦брхљ $Рѓђ f , f)
          , idn╦брхљ $Рѓђ T.­ЮЪЎ.*
          )
    .inv-rhs
      : Рѕђ {a b}
      Рєњ (f : S.obj (hom╦б (a , b)))
      Рєњ S.homрхЌ (hom╦б (b , b))
          ( idn╦брхљ $Рѓђ T.­ЮЪЎ.*
          , cmp╦брхљ $Рѓђ (f , inv╦брхљ $Рѓђ f)
          )
{-# NO_ETA t #-}
open t public
