{-# OPTIONS --without-K #-}

module Groupoid.Closed where

open import Agda.Primitive
module G where
  open import Groupoid public
    hiding (module Œ†; module TF)
  module Œ† where
    open Groupoid.Œ† public
    open import Groupoid.Bifunctor public
    open import Groupoid.Presheaf public
    open import Groupoid.Profunctor public
  module TF where
    open Groupoid.TF public
    open import Groupoid.Dinatural public
import Setoid as S
open import Type as T
  using (_,_)

record t {d} ..{‚Ñì·µí ‚ÑìÀ¢·µí ‚ÑìÀ¢ ∞}
  (A : G.t d ‚Ñì·µí ‚ÑìÀ¢·µí ‚ÑìÀ¢ ∞)
    : Set (‚Ñì·µí ‚äî ‚ÑìÀ¢·µí ‚äî ‚ÑìÀ¢ ∞) where
  no-eta-equality
  open G
  open TF
  open ‚àê

  field
    ‚ä∏ : A Œ†.:[ A ]‚áè‚ÇÄ·µó A
    ùüô : obj A

  _‚ä∏‚ÇÄ_
    : (a‚ÇÄ : obj A)
    ‚Üí (a‚ÇÅ : obj A)
    ‚Üí obj A
  _‚ä∏‚ÇÄ_ = Œª a‚ÇÄ a‚ÇÅ ‚Üí ‚ä∏ Œ†.$‚ÇÄ (a‚ÇÄ , a‚ÇÅ)

  _‚ä∏‚ÇÅ_
    : ‚àÄ {a‚ÇÄ a‚ÇÅ a‚ÇÇ a‚ÇÉ}
    ‚Üí (f‚ÇÄ : hom‚ÇÄ A a‚ÇÅ a‚ÇÄ)
    ‚Üí (f‚ÇÅ : hom‚ÇÄ A a‚ÇÇ a‚ÇÉ)
    ‚Üí hom‚ÇÄ A (a‚ÇÄ ‚ä∏‚ÇÄ a‚ÇÇ) (a‚ÇÅ ‚ä∏‚ÇÄ a‚ÇÉ)
  _‚ä∏‚ÇÅ_ = Œª f‚ÇÄ f‚ÇÅ ‚Üí ‚ä∏ Œ†.$‚ÇÅ (f‚ÇÄ , f‚ÇÅ)

  ._‚ä∏‚ÇÇ_
    : ‚àÄ {a‚ÇÄ a‚ÇÅ a‚ÇÇ a‚ÇÉ}
    ‚Üí {f‚ÇÄ f‚ÇÅ : hom‚ÇÄ A a‚ÇÅ a‚ÇÄ}
    ‚Üí {g‚ÇÄ g‚ÇÅ : hom‚ÇÄ A a‚ÇÇ a‚ÇÉ}
    ‚Üí (p‚ÇÄ : hom‚ÇÅ A f‚ÇÄ f‚ÇÅ)
    ‚Üí (p‚ÇÅ : hom‚ÇÅ A g‚ÇÄ g‚ÇÅ)
    ‚Üí hom‚ÇÅ A (f‚ÇÄ ‚ä∏‚ÇÅ g‚ÇÄ) (f‚ÇÅ ‚ä∏‚ÇÅ g‚ÇÅ)
  _‚ä∏‚ÇÇ_ = Œª p‚ÇÄ p‚ÇÅ ‚Üí ‚ä∏ Œ†.$‚ÇÇ (p‚ÇÄ , p‚ÇÅ)

  lazy : A Œ†.‚áí‚ÇÄ·µó A
  lazy = ‚ü® Œ†.!·µç ùüô [ ‚ä∏ ],‚ÇÄ - ‚ü©

  dual : A Œ†.‚áè‚ÇÄ·µó A
  dual = ‚ü® - [ ‚ä∏ ],‚ÇÄ Œ†.!·µç ùüô ‚ü©

  field
    susp : - ‚áî‚ÇÅ·µó lazy
    idn : Œ†.!:[ A ]‚ÇÄ ùüô :‚áè‚ÇÅ·µó ‚ä∏
