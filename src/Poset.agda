{-# OPTIONS --without-K #-}

module Poset where

open import Agda.Primitive
import Setoid.Core.Base
open import Common public

t : ‚àÄ ..(‚Ñì·µí ‚Ñì ∞ : _) ‚Üí Set (lsuc (‚Ñì·µí ‚äî ‚Ñì ∞))
t = Setoid.Core.Base.t Dir.‚â§

import Setoid.Core.Discrete
import Setoid.Core.Exponential
import Setoid.Core.Homotopy
import Setoid.Core.Initial
import Setoid.Core.Op
import Setoid.Core.Tensor
import Setoid.Core.Terminal

module Discrete = Setoid.Core.Discrete
module Œ† where
  open import Setoid.Core.Exponential public
  open import Setoid.Core.Exponential.Boot public
module TFor = Setoid.Core.Homotopy
module ùüò = Setoid.Core.Initial
module Op = Setoid.Core.Op
module ‚àê where
  open import Setoid.Core.Tensor public
  open import Setoid.Core.Tensor.Boot public
module ùüô = Setoid.Core.Terminal
