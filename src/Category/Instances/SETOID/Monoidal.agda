{-# OPTIONS --without-K #-}

module Category.Instances.SETOID.Monoidal where

open import Agda.Primitive
private
  module C where
    open import Category public
    module I where
      module SETOID where
        open import Category.Instances.SETOID public
private
  module G where
    open import Groupoid public
    module Mon where
      open import Groupoid.Monoidal public
import Setoid as S
open import Type as T
  using (_,_)

-- SETOID is a monoidal category
mon
  : ‚àÄ ..{‚Ñì·µí ‚Ñì ∞}
  ‚Üí G.Mon.t (C.I.SETOID.c ‚Ñì·µí ‚Ñì ∞)

-- ‚äó
C.Map._$‚ÇÄ_ (G.Mon.t.‚äó mon) (A , B) =
  A S.Ten.‚äó B
S.Map._$‚ÇÄ_ (S.Map._$‚ÇÄ_ (C.Map.-$‚ÇÅÀ¢- (G.Mon.t.‚äó mon)) (f‚ÇÄ , f‚ÇÅ)) (x , y) =
  (f‚ÇÄ S.Map.$‚ÇÄ x) , (f‚ÇÅ S.Map.$‚ÇÄ y)
S.Map._$‚ÇÅ_ (S.Map._$‚ÇÄ_ (C.Map.-$‚ÇÅÀ¢- (G.Mon.t.‚äó mon)) (f‚ÇÄ , f‚ÇÅ)) (p , q) =
  (f‚ÇÄ S.Map.$‚ÇÅ p) , (f‚ÇÅ S.Map.$‚ÇÅ q)
S.Map.com‚ÇÅ (S.Map._$‚ÇÅ_ (C.Map.-$‚ÇÅÀ¢- (G.Mon.t.‚äó mon)) (p , q))
  = S.Map.com‚ÇÅ p
  , S.Map.com‚ÇÅ q
S.Map.com‚ÇÅ (C.Map.idn (G.Mon.t.‚äó mon) {A , B})
  = S.idn·µó A _
  , S.idn·µó B _
S.Map.com‚ÇÅ (C.Map.cmp (G.Mon.t.‚äó mon) {_}{_}{A , B} _ _)
  = S.idn·µó A _
  , S.idn·µó B _

-- ùüô
G.Mon.t.ùüô mon =
  S.ùüô.s

-- Œª
S.Map._$‚ÇÄ_ (C.Map.com‚ÇÅ (C.Map.fwd (G.Mon.t.∆õ mon))) (_ , a) =
  a
S.Map._$‚ÇÅ_ (C.Map.com‚ÇÅ (C.Map.fwd (G.Mon.t.∆õ mon))) (_ , f) =
  f
S.Map.com‚ÇÅ (C.Map.nat‚ÇÅ (C.Map.fwd (G.Mon.t.∆õ mon)) {_}{A} _) =
  S.idn·µó A _
S.Map._$‚ÇÄ_ (C.Map.com‚ÇÅ (C.Map.bwd (G.Mon.t.∆õ mon))) a =
  _ , a
S.Map._$‚ÇÅ_ (C.Map.com‚ÇÅ (C.Map.bwd (G.Mon.t.∆õ mon))) f =
  _ , f
S.Map.com‚ÇÅ (C.Map.nat‚ÇÅ (C.Map.bwd (G.Mon.t.∆õ mon)) {_}{A} g) =
  _ , S.idn·µó A _
S.Map.com‚ÇÅ (C.Map.com‚ÇÇ (C.Map.iso-fwd (G.Mon.t.∆õ mon)) {A}) =
  _ , S.idn·µó A _
S.Map.com‚ÇÅ (C.Map.com‚ÇÇ (C.Map.iso-bwd (G.Mon.t.∆õ mon)) {A}) =
  S.idn·µó A _

-- œÅ
S.Map._$‚ÇÄ_ (C.Map.com‚ÇÅ (C.Map.fwd (G.Mon.t.œÅ mon))) (a , _) =
  a
S.Map._$‚ÇÅ_ (C.Map.com‚ÇÅ (C.Map.fwd (G.Mon.t.œÅ mon))) (f , _) =
  f
S.Map.com‚ÇÅ (C.Map.nat‚ÇÅ (C.Map.fwd (G.Mon.t.œÅ mon)) {_}{A} _) =
  S.idn·µó A _
S.Map._$‚ÇÄ_ (C.Map.com‚ÇÅ (C.Map.bwd (G.Mon.t.œÅ mon))) a =
  a , _
S.Map._$‚ÇÅ_ (C.Map.com‚ÇÅ (C.Map.bwd (G.Mon.t.œÅ mon))) f =
  f , _
S.Map.com‚ÇÅ (C.Map.nat‚ÇÅ (C.Map.bwd (G.Mon.t.œÅ mon)) {_}{A} _) =
  S.idn·µó A _ , _
S.Map.com‚ÇÅ (C.Map.com‚ÇÇ (C.Map.iso-fwd (G.Mon.t.œÅ mon)) {A}) =
  S.idn·µó A _ , _
S.Map.com‚ÇÅ (C.Map.com‚ÇÇ (C.Map.iso-bwd (G.Mon.t.œÅ mon)) {A}) =
  S.idn·µó A _

-- Œ± 
S.Map._$‚ÇÄ_ (C.Map.com‚ÇÅ (C.Map.fwd (G.Mon.t.Œ± mon))) ((a , b) , c) =
  (a , (b , c))
S.Map._$‚ÇÅ_ (C.Map.com‚ÇÅ (C.Map.fwd (G.Mon.t.Œ± mon))) ((f , g) , h) =
  (f , (g , h))
S.Map.com‚ÇÅ (C.Map.nat‚ÇÅ (C.Map.fwd (G.Mon.t.Œ± mon)) {_}{((A , B) , C)} _) =
  (S.idn·µó A _ , (S.idn·µó B _ , S.idn·µó C _))
S.Map._$‚ÇÄ_ (C.Map.com‚ÇÅ (C.Map.bwd (G.Mon.t.Œ± mon))) (a , (b , c)) =
  ((a , b) , c)
S.Map._$‚ÇÅ_ (C.Map.com‚ÇÅ (C.Map.bwd (G.Mon.t.Œ± mon))) (f , (g , h)) =
  ((f , g) , h)
S.Map.com‚ÇÅ (C.Map.nat‚ÇÅ (C.Map.bwd (G.Mon.t.Œ± mon)) {_}{((A , B) , C)} _) =
  (S.idn·µó A _ , S.idn·µó B _) , S.idn·µó C _
S.Map.com‚ÇÅ (C.Map.com‚ÇÇ (C.Map.iso-fwd (G.Mon.t.Œ± mon)) {((A , B) , C)}) =
  (S.idn·µó A _ , S.idn·µó B _) , S.idn·µó C _
S.Map.com‚ÇÅ (C.Map.com‚ÇÇ (C.Map.iso-bwd (G.Mon.t.Œ± mon)) {((A , B) , C)}) =
  S.idn·µó A _ , (S.idn·µó B _ , S.idn·µó C _)

-- triangle law
S.Map.com‚ÇÅ (G.Mon.t.tri mon {A}{B}) =
  S.idn·µó A _ , S.idn·µó B _

-- pentagon law
S.Map.com‚ÇÅ (G.Mon.t.pnt mon {A}{B}{C}{D}) =
  S.idn·µó A _ , (S.idn·µó B _ , (S.idn·µó C _ , S.idn·µó D _))
